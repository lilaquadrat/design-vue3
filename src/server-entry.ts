import { renderToString } from 'vue/server-renderer';
import { getAppInstance } from './main';

import { basename } from 'path';
import type { Content, Customers } from '@lilaquadrat/interfaces';
import useContentStore from '@/stores/content.store';
import { dynamicRoutes } from './routes';
import hooks from './mixins/hooks';

export async function render (url: string, context: any, contextData: Content[], recipientData: Customers, manifest: Record<string, string[]>, options: {cdnUrl: string}) {
  const { app, router, pinia } = getAppInstance(context, dynamicRoutes, false);

  hooks(router, { initAuth: false });

  await router.push(url);
  await router.isReady();

  const contentStore = useContentStore();

  /**
  * for pdfs all images must be preloaded
  * because there will be no hydration
  */
  if(context.renderTarget === 'pdf') {

    context.settings.preloadImages = true; 

  }

  if(contextData) contentStore.addMulti(contextData);
  if(recipientData) contentStore.recipient = recipientData;

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: { modules?: Set<string> } = {};
  const html = await renderToString(app, ctx);
  const initialState = JSON.stringify(pinia.state.value).replace(/</g, '\\u003c');
  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules as Set<string>, manifest, options);

  return { html, preloadLinks, initialState, url };
}

function renderPreloadLinks (modulesSet: Set<string>, manifest: Record<string, string[]>, options: {cdnUrl: string}) {
  let links = '';
  const seen = new Set();

  modulesSet?.forEach((id) => {

    const files = manifest[id];

    if (files) {

      files.forEach((file: string) => {

        if (!seen.has(file)) {
          seen.add(file);

          const filename = basename(file);

          if (manifest[filename]) {

            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile, options.cdnUrl);
              seen.add(depFile);
            }

          }

          links += renderPreloadLink(file, options.cdnUrl);
        }

      });
    }

  });

  return links;

}

function renderPreloadLink (file: string, base: string) {
  if (!file) return '';
  
  const fileExtMap: Record<string, { rel: string, as?: string, type?: string, crossorigin?: boolean }> = {
    '.js'   : { rel: 'modulepreload', crossorigin: true },
    '.css'  : { rel: 'stylesheet' },
    '.woff' : { rel: 'preload', as: 'font', type: 'font/woff', crossorigin: true },
    '.woff2': { rel: 'preload', as: 'font', type: 'font/woff2', crossorigin: true },
    '.gif'  : { rel: 'preload', as: 'image', type: 'image/gif' },
    '.jpg'  : { rel: 'preload', as: 'image', type: 'image/jpeg' },
    '.jpeg' : { rel: 'preload', as: 'image', type: 'image/jpeg' },
    '.png'  : { rel: 'preload', as: 'image', type: 'image/png' }
  };
  const ext = Object.keys(fileExtMap).find(ext => file.endsWith(ext));

  if (!ext) return '';

  const { rel, as, type, crossorigin } = fileExtMap[ext];
  let link = `<link rel="${rel}" href="${base}${file}"`;
  
  if (as) link += ` as="${as}"`;
  if (type) link += ` type="${type}"`;
  if (crossorigin) link += ' crossorigin';
  
  return `${link}>`;
}